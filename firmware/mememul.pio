
// Configure: IN  pins: ADDR
//            OUT pins: DATA    (PINCTRL_OUT_BASE, PINCTRL_OUT_COUNT)
//            SET pin:  CE      (PINCTRL_SET_BASE, PINCTRL_SET_COUNT)
//            JMP pin:  RW      (EXECCTRL_JMP_PIN)
//
.program memread
    pull    block           // Get address header, top 15 bits and
    mov     x osr           // put into x and leave there forever
    irq     6               // Set execution flag for this SM 
.wrap_target
start:
    wait    1 irq 6         // Wait for the execution flag and clear it
    mov     isr x           // Get top 15 bits from x, when combined forms a 32bit address in Pico memory
    in      pins 16         // Shift in the bottom 16 bits from gpio pins to ISR
    in      null 1          // and multiply by 2 (16 bit transfers)
                            // At this point, autopush puts the address into the RX FiFo, signals the read_addr_dma
                            // channel to initiate transfer, which puts it as read address trigger for read_data_dma, then
                            // chains to write_addr_dma, which immediately copies the read address trigger of read_data_dma into
                            // the write address trigger of write_data_dma and then chains to read_addr_dma to start over.
                            // When started, read_data_dma places the contents of the read address into the OSR
                            // ( See piocfg_setup() )

    out     y 1             // Get #CE flag bit into Y
    jmp     !y ce_enable
    set     pins 1
    jmp     chk_write
ce_enable:
    set     pins 0
chk_write:
    jmp     pin write       // If it is a write operation, jump to it
    
    out     pins 11         // Shift 11 bits (8 bit word + 3 unused) from OSR to gpio pins
    out     null 1          // Discard the RW flag bit, autopull enabled

restart:
    irq     6               // Re-enable execution flag
    jmp     start           // And restart

write:
    out     null 11         // Discard data byte + 3 unused bits
    out     y 1             // Get RW flag bit into Y, autopull enabled
    jmp     !y restart      // If not RW memory, restart

    irq     7               // Set execution flag for the memwrite SM
.wrap


// The input FIFO is write_addr_dma channel's config read address
//
// Configure: IN  pins: DATA    (PINCTRL_IN_BASE,  PINCTRL_IN_COUNT)
//            JMP pin:  WR      (EXECCTRL_JMP_PIN)
//
.program memwrite
.wrap_target
    wait    1 irq 7         // Wait for the execution flag and clear it

    in      pins 13         // Read the data bus (CE + 8 bit word + 3 unused + RW)
                            // CE and RW should be in the same status as the memory location. We transfer
                            // them to avoid bit manipulation on core 0
    jmp     pin continue    // Check that RW is still set.
    jmp     exit            // If not, abort

continue:
    push                    // Move ISR to input FiFo. This signals the write_data_dma channel, which has its
                            // config write address trigger configured by write_addr_dma, to start transfer

exit:
    irq     6               // Set execution flag for the main SM
.wrap
